RFC 8446 - The Transport Layer Security (TLS)
Protocol Version 1.3


Section 7
Cryptographic Computations


   The TLS handshake establishes one or more
 input secrets which are
   combined to create the actual working keying
 material, as detailed
   below.  The key derivation process
 incorporates both the input
   secrets and the handshake transcript.
  Note that because the
   handshake transcript includes the random
 values from the Hello
   messages, any given handshake will
 have different traffic secrets,
   even if the same input secrets are
 used, as is the case when the same
   PSK is used for multiple connections.


section-7.1
Key Schedule

   The key derivation process makes use of
 the HKDF-Extract and
   HKDF-Expand functions as defined for
 HKDF rfc 5869 HMAC-based Extract-and-Expand
 Key Derivation Function (HKDF), as well as the
   functions defined below:

       HKDF-Expand-Label(Secret, Label,
 Context, Length) =
            HKDF-Expand(Secret, HkdfLabel, Length)

       Where HkdfLabel is specified as:

       struct {
           uint16 length = Length;
           opaque label&lt;7..255&gt; = "tls13 " + Label;
           opaque context&lt;0..255&gt; = Context;
       } HkdfLabel;

       Derive-Secret(Secret, Label, Messages) =
            HKDF-Expand-Label(Secret, Label,
                              Transcript-Hash(Messages), Hash.length)

   The Hash function used by Transcript-Hash
 and HKDF is the cipher
   suite hash algorithm.  Hash.length is its
 output length in bytes.
   Messages is the concatenation of the
 indicated handshake messages,
   including the handshake message type and
 length fields, but not
   including record layer headers.  Note
 that in some cases a zero-
   length Context (indicated by "") is
 passed to HKDF-Expand-Label.  The
   labels specified in this document
 are all ASCII strings and do not
   include a trailing NUL byte.

   Note: With common hash functions, any
 label longer than 12 characters
   requires an additional iteration of the
 hash function to compute.
   The labels in this specification have
 all been chosen to fit within
   this limit.


   Keys are derived from two input secrets
 using the HKDF-Extract and
   Derive-Secret functions.  The general
 pattern for adding a new secret
   is to use HKDF-Extract with the Salt
 being the current secret state
   and the Input Keying Material (IKM)
 being the new secret to be added.
   In this version of TLS 1.3, the two
 input secrets are:

   -  PSK (a pre-shared key established
 externally or derived from the
      resumption_master_secret value from
 a previous connection)

   -  (EC)DHE shared secret Section 7.4

   This produces a full key derivation schedule
 shown in the diagram
   below.  In this diagram, the following
 formatting conventions apply:

   -  HKDF-Extract is drawn as taking the
 Salt argument from the top and
      the IKM argument from the left, with
 its output to the bottom and
      the name of the output on the right.

   -  Derive-Secret's Secret argument is
 indicated by the incoming
      arrow.  For instance, the Early
 Secret is the Secret for
      generating the
client_early_traffic_secret.

   -  "0" indicates a string of Hash.length
 bytes set to zero.



             0
             |
             v
   PSK -&gt;  HKDF-Extract = Early Secret
             |
             +-----&gt; Derive-Secret(., "ext binder" | "res binder", "")
             |                     = binder_key
             |
             +-----&gt; Derive-Secret(., "c e traffic", ClientHello)
             |                     = client_early_traffic_secret
             |
             +-----&gt; Derive-Secret(., "e exp master", ClientHello)
             |                     = early_exporter_master_secret
             v
       Derive-Secret(., "derived", "")
             |
             v
   (EC)DHE -&gt; HKDF-Extract = Handshake Secret
             |
             +-----&gt; Derive-Secret(., "c hs traffic",
             |                     ClientHello...ServerHello)
             |                     = client_handshake_traffic_secret
             |
             +-----&gt; Derive-Secret(., "s hs traffic",
             |                     ClientHello...ServerHello)
             |                     = server_handshake_traffic_secret
             v
       Derive-Secret(., "derived", "")
             |
             v
   0 -&gt; HKDF-Extract = Master Secret
             |
             +-----&gt; Derive-Secret(., "c ap traffic",
             |                     ClientHello...server Finished)
             |                     = client_application_traffic_secret_0
             |
             +-----&gt; Derive-Secret(., "s ap traffic",
             |                     ClientHello...server Finished)
             |                     = server_application_traffic_secret_0
             |
             +-----&gt; Derive-Secret(., "exp master",
             |                     ClientHello...server Finished)
             |                     = exporter_master_secret
             |
             +-----&gt; Derive-Secret(., "res master",
                                   ClientHello...client Finished)
                                   = resumption_master_secret




   The general pattern here is that the
 secrets shown down the left side
   of the diagram are just raw entropy
 without context, whereas the
   secrets down the right side include
 Handshake Context and therefore
   can be used to derive working keys
 without additional context.  Note
   that the different calls to
 Derive-Secret may take different Messages
   arguments, even with the same secret.
  In a 0-RTT exchange,
   Derive-Secret is called with four
 distinct transcripts; in a
   1-RTT-only exchange, it is called with
 three distinct transcripts.

   If a given secret is not available,
 then the 0-value consisting of a
   string of Hash.length bytes set to
 zeros is used.  Note that this
   does not mean skipping rounds, so if
 PSK is not in use, Early Secret
   will still be HKDF-Extract(0, 0).
  For the computation of the
   binder_key, the label is "ext binder"
 for external PSKs (those
   provisioned outside of TLS) and
 "res binder" for resumption PSKs
   (those provisioned as the resumption
 master secret of a previous
   handshake).  The different labels
 prevent the substitution of one
   type of PSK for the other.

   There are multiple potential Early
 Secret values, depending on which
   PSK the server ultimately selects.
  The client will need to compute
   one for each potential PSK; if no
 PSK is selected, it will then need
   to compute the Early Secret
 corresponding to the zero PSK.

   Once all the values which are to be
 derived from a given secret have
   been computed, that secret SHOULD be erased.



Section 7.2
Updating Traffic Secrets

   Once the handshake is complete, it is
 possible for either side to
   update its sending traffic keys using
 the KeyUpdate handshake message
   defined in Section 4.6.3.  The next
 generation of traffic keys is
   computed by generating
 client_/server_application_traffic_secret_N+1
   from client_/server_application_traffic_secret_N
 as described in this
   section and then re-deriving the traffic
 keys as described in
   Section 7.3.

   The next-generation application_traffic_secret
 is computed as:

       application_traffic_secret_N+1 =
           HKDF-Expand-Label(application_traffic_secret_N,
                             "traffic upd", "", Hash.length)

   Once client_/server_application_traffic_secret_N+1
and its associated
   traffic keys have been computed,
 implementations SHOULD delete
   client_/server_application_traffic_secret_N
 and its associated
   traffic keys.


Section 7.3.
Traffic Key Calculation

   The traffic keying material is generated
 from the following input
   values:

   -  A secret value

   -  A purpose value indicating the specific value being generated

   -  The length of the key being generated

   The traffic keying material is generated
 from an input traffic secret
   value using:

   sender_write_key = HKDF-Expand-Label(Secret,
 "key", "", key_length)
   sender_write_iv  = HKDF-Expand-Label(Secret,
 "iv", "", iv_length)

   sender denotes the sending side.  The
 value of Secret for each
   record type is shown in the table below.

       +-------------------+---------------------------------------+
       | Record Type       | Secret                                |
       +-------------------+---------------------------------------+
       | 0-RTT Application | client_early_traffic_secret           |
       |                   |                                       |
       | Handshake         | [<a href="https://datatracker.ietf.org/doc/html/rfc8446#ref-sender">sender</a>]_handshake_traffic_secret     |
       |                   |                                       |
       | Application Data  | [<a href="https://datatracker.ietf.org/doc/html/rfc8446#ref-sender">sender</a>]_application_traffic_secret_N |
       +-------------------+---------------------------------------+

   All the traffic keying material is
 recomputed whenever the underlying
   Secret changes (e.g., when changing from
 the handshake to Application
   Data keys or upon a key update).


Section 7.4
(EC)DHE Shared Secret Calculation

Section 7.4.1
Finite Field Diffie-Hellman

   For finite field groups, a conventional
 Diffie-Hellman "New directions in
cryptography">DH76
   computation is performed.  The negotiated
 key (Z) is converted to a
   byte string by encoding in big-endian form
 and left-padded with zeros
   up to the size of the prime.  This byte
 string is used as the shared
   secret in the key schedule as specified above.

   Note that this construction differs from
 previous versions of TLS
   which removed leading zeros.

Section 7.4.2
Elliptic Curve Diffie-Hellman

   For secp256r1, secp384r1, and secp521r1,
 ECDH calculations (including
   parameter and key generation as well as
 the shared secret
   calculation) are performed according to
  IEEE 1363 using the
   ECKAS-DH1 scheme with the identity map as
 the key derivation function
   (KDF), so that the shared secret is the
 x-coordinate of the ECDH
   shared secret elliptic curve point
 represented as an octet string.
   Note that this octet string ("Z" in IEEE 1363
 terminology) as output
   by FE2OSP (the Field Element to Octet
 String Conversion Primitive)
   has constant length for any given field;
 leading zeros found in this
   octet string MUST NOT be truncated.

   (Note that this use of the identity
 KDF is a technicality.  The
   complete picture is that ECDH is employed
 with a non-trivial KDF
   because TLS does not directly use this
 secret for anything other than
   for computing other secrets.)

   For X25519 and X448, the ECDH calculations
 are as follows:

   -  The public key to put into the
 KeyShareEntry.key_exchange
      structure is the result of applying the
 ECDH scalar multiplication
      function to the secret key of appropriate
 length (into scalar
      input) and the standard public basepoint
 (into u-coordinate point
      input).

   -  The ECDH shared secret is the result
 of applying the ECDH scalar
      multiplication function to the secret
 key (into scalar input) and
      the peer's public key (into u-coordinate
 point input).  The output
      is used raw, with no
 processing.

   For these curves, implementations
 SHOULD use the approach specified
   in rfc 7748 Elliptic Curves for Security
 to calculate the Diffie-Hellman shared secret.
   Implementations MUST check whether the
computed Diffie-Hellman shared
   secret is the all-zero value and abort if
 so, as described in
   Section 6 of RFC 7748.  If implementors
 use an alternative
   implementation of these elliptic curves,
 they SHOULD perform the
   additional checks specified in rfc 7748
 Section 7.


Section 7.5
Exporters

RFC 5705 defines keying material exporters
 for TLS in terms of the
   TLS pseudorandom function (PRF).  This
 document replaces the PRF with
   HKDF, thus requiring a new construction.
  The exporter interface
   remains the same.

   The exporter value is computed as:

   TLS-Exporter(label, context_value, key_length) =
       HKDF-Expand-Label(Derive-Secret(Secret, label, ""),
                         "exporter", Hash(context_value), key_length)

   Where Secret is either the
early_exporter_master_secret or the
   exporter_master_secret.  Implementations
 MUST use the
   exporter_master_secret unless explicitly
 specified by the
   application.  The early_exporter_master_secret
 is defined for use in
   settings where an exporter is needed
 for 0-RTT data.  A separate
   interface for the early exporter is
 RECOMMENDED; this avoids the
   exporter user accidentally using an early
 exporter when a regular one
   is desired or vice versa.

   If no context is provided, the context_value
 is zero length.
   Consequently, providing no context computes
 the same value as
   providing an empty context.  This is a
 change from previous versions
   of TLS where an empty context produced a
 different output than an
   absent context.  As of this document's
 publication, no allocated
   exporter label is used both with and
 without a context.  Future
   specifications MUST NOT define a use of
 exporters that permit both an
   empty context and no context with the
 same label.  New uses of
   exporters SHOULD provide a context in
 all exporter computations,
   though the value could be empty.

   Requirements for the format of exporter
 labels are defined in
   rfc 5705 Section 4.
