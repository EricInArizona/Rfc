RFC 8446 - The Transport Layer Security
(TLS) Protocol Version 1.3

Section 2.
Protocol Overview

The cryptographic parameters used by the
 secure channel are produced
   by the TLS handshake protocol.  This
 sub-protocol of TLS is used by
   the client and server when first
 communicating with each other.  The
   handshake protocol allows peers to
negotiate a protocol version,
   select cryptographic algorithms, optionally
 authenticate each other,
   and establish shared secret keying material.
  Once the handshake is
   complete, the peers use the established
 keys to protect the
   application-layer traffic.

   A failure of the handshake or other
 protocol error triggers the
   termination of the connection, optionally
 preceded by an alert
   message
(<a href="https://datatracker.ietf.org/doc/html/rfc8446#section-6">
Section 6</a>).

   TLS supports three basic key exchange modes:

   -  (EC)DHE (Diffie-Hellman over either
 finite fields or elliptic
      curves)

   -  PSK-only

   -  PSK with (EC)DHE


   Figure 1 below shows the basic full TLS
 handshake:

       Client                                           Server

Key  ^ ClientHello
Exch | + key_share*
     | + signature_algorithms*
     | + psk_key_exchange_modes*
     v + pre_shared_key*       --------&gt;
                                                  ServerHello  ^ Key
                                                 + key_share*  | Exch
                                            + pre_shared_key*  v
                                        {EncryptedExtensions}  ^  Server
                                        {CertificateRequest*}  v  Params
                                               {Certificate*}  ^
                                         {CertificateVerify*}  | Auth
                                                   {Finished}  v
                               &lt;--------  [Application Data*]
     ^ {Certificate*}
Auth | {CertificateVerify*}
     v {Finished}              --------&gt;
       [Application Data]      &lt;-------&gt;  [Application Data]

              +  Indicates noteworthy extensions
 sent in the
                 previously noted message.

              *  Indicates optional or
situation-dependent
                 messages/extensions that are
 not always sent.

              {} Indicates messages protected
using keys
                 derived from a
[<a href="https://datatracker.ietf.org/doc/html/rfc8446#ref-sender">sender</a>]
_handshake_traffic_secret.

              [] Indicates messages protected
 using keys
                 derived from
[<a href="https://datatracker.ietf.org/doc/html/rfc8446#ref-sender">sender</a>]
_application_traffic_secret_N.

               Figure 1: Message Flow for Full
 TLS Handshake

   The handshake can be thought of as having
 three phases (indicated in
   the diagram above):

   -  Key Exchange: Establish shared keying
 material and select the
      cryptographic parameters.  Everything
after this phase is
      encrypted.

   -  Server Parameters: Establish other
 handshake parameters
      (whether the client is authenticated,
 application-layer protocol
      support, etc.).


   -  Authentication: Authenticate the server
 (and, optionally, the
      client) and provide key confirmation
 and handshake integrity.

   In the Key Exchange phase, the client
 sends the ClientHello
   (<a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.1.2">Section 4.1.2</a>)
 message, which contains a random nonce
   (ClientHello.random); its offered protocol
 versions; a list of
   symmetric cipher/HKDF hash pairs; either
 a set of Diffie-Hellman key
   shares (in the "key_share"
(<a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.2.8">
Section 4.2.8</a>) extension), a set of
   pre-shared key labels (in the "pre_shared_key"
 (<a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.2.11">
Section 4.2.11</a>)
   extension), or both; and potentially
 additional extensions.
   Additional fields and/or messages may also
 be present for middlebox
   compatibility.

   The server processes the ClientHello and
 determines the appropriate
   cryptographic parameters for the connection.
  It then responds with
   its own ServerHello
(<a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.1.3">Section 4.1.3</a>),
 which indicates the negotiated
   connection parameters.  The combination of
 the ClientHello and the
   ServerHello determines the shared keys.
 If (EC)DHE key establishment
   is in use, then the ServerHello contains
 a "key_share" extension with
   the server's ephemeral Diffie-Hellman
 share; the server's share MUST
   be in the same group as one of the
 client's shares.  If PSK key
   establishment is in use, then the
 ServerHello contains a
   "pre_shared_key" extension indicating
 which of the client's offered
   PSKs was selected.  Note that implementations
 can use (EC)DHE and PSK
   together, in which case both extensions
 will be supplied.

   The server then sends two messages to
 establish the Server
   Parameters:

   EncryptedExtensions:  responses to
 ClientHello extensions that are
      not required to determine the
 cryptographic parameters, other than
      those that are specific to individual
 certificates.
      [<a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.3.1">
Section 4.3.1</a>]

   CertificateRequest:  if certificate-based
 client authentication is
      desired, the desired parameters for
 that certificate.  This
      message is omitted if client authentication
is not desired.
      [<a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.3.2">
Section 4.3.2</a>]

   Finally, the client and server exchange
 Authentication messages.  TLS
   uses the same set of messages every time
 that certificate-based
   authentication is needed.  (PSK-based
 authentication happens as a
   side effect of key exchange.)  Specifically:

   Certificate:  The certificate of the
 endpoint and any per-certificate
      extensions.  This message is omitted
 by the server if not
      authenticating with a certificate and
 by the client if the server
      did not send CertificateRequest
 (thus indicating that the client
      should not authenticate with a
 certificate).  Note that if raw
      public keys
[<a href="https://datatracker.ietf.org/doc/html/rfc7250" title="&quot;Using Raw Public Keys in Transport Layer Security (TLS) and Datagram Transport Layer Security (DTLS)&quot;">
RFC7250</a>] or the cached information extension
      [<a href="https://datatracker.ietf.org/doc/html/rfc7924" title="&quot;Transport Layer Security (TLS) Cached Information Extension&quot;">RFC7924</a>]
 are in use, then this message will not
 contain a
      certificate but rather some other
 value corresponding to the
      server's long-term key.
[<a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.4.2">
Section 4.4.2</a>]

   CertificateVerify:  A signature over the
 entire handshake using the
      private key corresponding to the public
key in the Certificate
      message.  This message is omitted if
 the endpoint is not
      authenticating via a certificate.
  [<a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.4.3">
Section 4.4.3</a>]

   Finished:  A MAC (Message Authentication
 Code) over the entire
      handshake.  This message provides key
 confirmation, binds the
      endpoint's identity to the exchanged
 keys, and in PSK mode also
      authenticates the handshake.
[<a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.4.4">
Section 4.4.4</a>]

   Upon receiving the server's messages, the
 client responds with its
   Authentication messages, namely
 Certificate and CertificateVerify (if
   requested), and Finished.

   At this point, the handshake is complete,
 and the client and server
   derive the keying material required by
 the record layer to exchange
   application-layer data protected through
 authenticated encryption.
   Application Data MUST NOT be sent prior
 to sending the Finished
   message, except as specified in
<a href="https://datatracker.ietf.org/doc/html/rfc8446#section-2.3">
Section 2.3</a>.  Note that while the
   server may send Application Data prior
 to receiving the client's
   Authentication messages, any data sent at
 that point is, of course,
   being sent to an unauthenticated peer.


Section-2.1
Incorrect DHE Share

   If the client has not provided a sufficient
 "key_share" extension
   (e.g., it includes only DHE or ECDHE
 groups unacceptable to or
   unsupported by the server), the server
 corrects the mismatch with a
   HelloRetryRequest and the client needs
 to restart the handshake with
   an appropriate "key_share" extension,
 as shown in Figure 2.  If no
   common cryptographic parameters can
 be negotiated, the server MUST
   abort the handshake with an appropriate alert.

        Client                                               Server

        ClientHello
        + key_share             --------&gt;
                                                  HelloRetryRequest
                                &lt;--------               + key_share
        ClientHello
        + key_share             --------&gt;
                                                        ServerHello
                                                        + key_share
                                              {EncryptedExtensions}
                                              {CertificateRequest*}
                                                     {Certificate*}
                                               {CertificateVerify*}
                                                         {Finished}
                                &lt;--------       [Application Data*]
        {Certificate*}
        {CertificateVerify*}
        {Finished}              --------&gt;
        [Application Data]      &lt;-------&gt;        [Application Data]

             Figure 2: Message Flow for a Full Handshake with
                           Mismatched Parameters

   Note: The handshake transcript incorporates
 the initial
   ClientHello/HelloRetryRequest exchange;
 it is not reset with the
   new ClientHello.

   TLS also allows several optimized
variants of the basic handshake, as
   described in the following sections.


Section-2.2
Resumption and Pre-Shared Key (PSK)

   Although TLS PSKs can be established out
 of band, PSKs can also be
   established in a previous connection
 and then used to establish a new
   connection ("session resumption" or
"resuming" with a PSK).  Once a
   handshake has completed, the server can
 send the client a PSK
   identity that corresponds to a unique
 key derived from the initial
   handshake (see
<a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.6.1">
Section 4.6.1</a>).  The client can then use
 that PSK
   identity in future handshakes to negotiate
 the use of the associated
   PSK.  If the server accepts the PSK,
 then the security context of the
   new connection is cryptographically
 tied to the original connection
   and the key derived from the initial
handshake is used to bootstrap
   the cryptographic state instead of
 a full handshake.  In TLS 1.2 and
   below, this functionality was provided
 by "session IDs" and "session
   tickets"
 [<a href="https://datatracker.ietf.org/doc/html/rfc5077" title="&quot;Transport Layer Security (TLS) Session Resumption without Server-Side State&quot;">
RFC5077</a>].
  Both mechanisms are obsoleted in TLS 1.3.

   PSKs can be used with (EC)DHE key exchange
 in order to provide
   forward secrecy in combination with
 shared keys, or can be used
   alone, at the cost of losing forward
 secrecy for the application
   data.


   Figure 3 shows a pair of handshakes
 in which the first handshake
   establishes a PSK and the second
 handshake uses it:

          Client                                               Server

   Initial Handshake:
          ClientHello
          + key_share               --------&gt;
                                                          ServerHello
                                                          + key_share
                                                {EncryptedExtensions}
                                                {CertificateRequest*}
                                                       {Certificate*}
                                                 {CertificateVerify*}
                                                           {Finished}
                                    &lt;--------     [Application Data*]
          {Certificate*}
          {CertificateVerify*}
          {Finished}                --------&gt;
                                    &lt;--------      [NewSessionTicket]
          [Application Data]        &lt;-------&gt;      [Application Data]


   Subsequent Handshake:
          ClientHello
          + key_share*
          + pre_shared_key          --------&gt;
                                                          ServerHello
                                                     + pre_shared_key
                                                         + key_share*
                                                {EncryptedExtensions}
                                                           {Finished}
                                    &lt;--------     [Application Data*]
          {Finished}                --------&gt;
          [Application Data]        &lt;-------&gt;      [Application Data]

               Figure 3: Message Flow for
 Resumption and PSK

   As the server is authenticating via a
 PSK, it does not send a
   Certificate or a CertificateVerify
 message.  When a client offers
   resumption via a PSK, it SHOULD also
 supply a "key_share" extension
   to the server to allow the server to
 decline resumption and fall back
   to a full handshake, if needed.  The
 server responds with a
   "pre_shared_key" extension to negotiate
 the use of PSK key
   establishment and can (as shown here)
 respond with a "key_share"
   extension to do (EC)DHE key establishment,
 thus providing forward
   secrecy.

   When PSKs are provisioned out of band,
 the PSK identity and the KDF
   hash algorithm to be used with the PSK
 MUST also be provisioned.

   Note:  When using an out-of-band
 provisioned pre-shared secret, a
      critical consideration is using
 sufficient entropy during the key
      generation, as discussed in
[<a href="https://datatracker.ietf.org/doc/html/rfc4086" title="&quot;Randomness Requirements for Security&quot;">
RFC4086</a>].  Deriving a shared secret
      from a password or other low-entropy
 sources is not secure.  A
      low-entropy secret, or password, is
 subject to dictionary attacks
      based on the PSK binder.  The
 specified PSK authentication is not
      a strong password-based authenticated
 key exchange even when used
      with Diffie-Hellman key establishment.
  Specifically, it does not
      prevent an attacker that can
 observe the handshake from performing
      a brute-force attack on the
 password/pre-shared key.

Section-2.3
0-RTT Data

   When clients and servers share a PSK
 (either obtained externally or
   via a previous handshake), TLS 1.3 allows
 clients to send data on the
   first flight ("early data").  The client
 uses the PSK to authenticate
   the server and to encrypt the early data.

   As shown in Figure 4, the 0-RTT data is
 just added to the 1-RTT
   handshake in the first flight.  The rest
 of the handshake uses the
   same messages as for a 1-RTT handshake
 with PSK resumption.


         Client                                               Server

         ClientHello
         + early_data
         + key_share*
         + psk_key_exchange_modes
         + pre_shared_key
         (Application Data*)     --------&gt;
                                                         ServerHello
                                                    + pre_shared_key
                                                        + key_share*
                                               {EncryptedExtensions}
                                                       + early_data*
                                                          {Finished}
                                 &lt;--------       [Application Data*]
         (EndOfEarlyData)
         {Finished}              --------&gt;
         [Application Data]      &lt;-------&gt;        [Application Data]

               +  Indicates noteworthy extensions sent in the
                  previously noted message.

               *  Indicates optional or situation-dependent
                  messages/extensions that are not always sent.

               () Indicates messages protected using keys
                  derived from a client_early_traffic_secret.

               {} Indicates messages protected using keys
                  derived from a [<a href="https://datatracker.ietf.org/doc/html/rfc8446#ref-sender">sender</a>]_handshake_traffic_secret.

               [] Indicates messages protected using keys
                  derived from [<a href="https://datatracker.ietf.org/doc/html/rfc8446#ref-sender">sender</a>]_application_traffic_secret_N.

               Figure 4: Message Flow for a 0-RTT Handshake


   IMPORTANT NOTE: The security properties
 for 0-RTT data are weaker
   than those for other kinds of TLS data.
  Specifically:

   1.  This data is not forward secret, as
 it is encrypted solely under
       keys derived using the offered PSK.

   2.  There are no guarantees of non-replay
 between connections.
       Protection against replay for
 ordinary TLS 1.3 1-RTT data is
       provided via the server's Random
 value, but 0-RTT data does not
       depend on the ServerHello and
therefore has weaker guarantees.
       This is especially relevant if the
 data is authenticated either
       with TLS client authentication or
 inside the application
       protocol.  The same warnings
 apply to any use of the
       early_exporter_master_secret.

   0-RTT data cannot be duplicated within
 a connection (i.e., the server
   will not process the same data twice
 for the same connection), and an
   attacker will not be able to make
 0-RTT data appear to be 1-RTT data
   (because it is protected with different
 keys).
 <a href="https://datatracker.ietf.org/doc/html/rfc8446#appendix-E.5">
Appendix E.5</a> contains
   a description of potential attacks, and
 <a href="https://datatracker.ietf.org/doc/html/rfc8446#section-8">
Section 8</a> describes
   mechanisms which the server can use to
 limit the impact of replay.
