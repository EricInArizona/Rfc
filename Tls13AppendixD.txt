RFC 8446 - The Transport Layer Security
 (TLS) Protocol Version 1.3


Appendix D
Backward Compatibility

   The TLS protocol provides a built-in mechanism
 for version
   negotiation between endpoints potentially
 supporting different
   versions of TLS.

   TLS 1.x and SSL 3.0 use compatible ClientHello
 messages.  Servers can
   also handle clients trying to use future
 versions of TLS as long as
   the ClientHello format remains compatible
 and there is at least one
   protocol version supported by both the
 client and the server.

   Prior versions of TLS used the record
 layer version number
   (TLSPlaintext.legacy_record_version and
   TLSCiphertext.legacy_record_version) for
 various purposes.  As of
   TLS 1.3, this field is deprecated.  The value of
   TLSPlaintext.legacy_record_version MUST be
 ignored by all
   implementations.  The value of 
TLSCiphertext.legacy_record_version is
   included in the additional data for
 deprotection but MAY otherwise be
   ignored or MAY be validated to match the
 fixed constant value.
   Version negotiation is performed using only
 the handshake versions
   (ClientHello.legacy_version and
 ServerHello.legacy_version, as well
   as the ClientHello, HelloRetryRequest, and
 ServerHello
   "supported_versions" extensions).  In order
 to maximize
   interoperability with older endpoints,
 implementations that negotiate
   the use of TLS 1.0-1.2 SHOULD set the
 record layer version number to
   the negotiated version for the ServerHello
 and all records
   thereafter.

   For maximum compatibility with previously
 non-standard behavior and
   misconfigured deployments, all implementations
 SHOULD support
   validation of certification paths based 
on the expectations in this
   document, even when handling prior TLS
 versions' handshakes (see
   <a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.4.2.2">
Section 4.4.2.2</a>).

   TLS 1.2 and prior supported an "Extended
 Master Secret" 
[<a href="https://datatracker.ietf.org/doc/html/rfc7627" title="&quot;Transport Layer Security (TLS) Session Hash and Extended Master Secret Extension&quot;">
RFC7627</a>]
   extension which digested large parts of the
 handshake transcript into
   the master secret.  Because TLS 1.3 always
 hashes in the transcript
   up to the server Finished, implementations
 which support both TLS 1.3
   and earlier versions SHOULD indicate the
 use of the Extended Master
   Secret extension in their APIs whenever
 TLS 1.3 is used.

appendix-D.1
Negotiating with an Older Server

   A TLS 1.3 client who wishes to negotiate
 with servers that do not
   support TLS 1.3 will send a normal TLS 1.3
 ClientHello containing
   0x0303 (TLS 1.2) in ClientHello.legacy_version
 but with the correct
   version(s) in the "supported_versions"
 extension.  If the server does
   not support TLS 1.3, it will respond with
 a ServerHello containing an
   older version number.  If the client agrees
 to use this version, the
   negotiation will proceed as appropriate
 for the negotiated protocol.
   A client using a ticket for resumption
 SHOULD initiate the connection
   using the version that was previously negotiated.

   Note that 0-RTT data is not compatible 
with older servers and
   SHOULD NOT be sent absent knowledge that
 the server supports TLS 1.3.
   See 
<a href="https://datatracker.ietf.org/doc/html/rfc8446#appendix-D.3">
Appendix D.3</a>.

   If the version chosen by the server is not
 supported by the client
   (or is not acceptable), the client MUST
 abort the handshake with a
   "protocol_version" alert.

   Some legacy server implementations are
 known to not implement the TLS
   specification properly and might abort
 connections upon encountering
   TLS extensions or versions which they are
 not aware of.
   Interoperability with buggy servers is
 a complex topic beyond the
   scope of this document.  Multiple connection
 attempts may be required
   in order to negotiate a backward-compatible
 connection; however, this
   practice is vulnerable to downgrade
 attacks and is NOT RECOMMENDED.

appendix-D.2
Negotiating with an Older Client

   A TLS server can also receive a ClientHello
 indicating a version
   number smaller than its highest supported
 version.  If the
   "supported_versions" extension is present,
 the server MUST negotiate
   using that extension as described in
 <a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.2.1">
Section 4.2.1</a>.  If the
   "supported_versions" extension is not
 present, the server MUST
   negotiate the minimum of 
ClientHello.legacy_version and TLS 1.2.  For
   example, if the server supports TLS 1.0,
 1.1, and 1.2, and
   legacy_version is TLS 1.0, the server will
 proceed with a TLS 1.0
   ServerHello.  If the "supported_versions"
 extension is absent and the
   server only supports versions greater than
   ClientHello.legacy_version, the server MUST
 abort the handshake with
   a "protocol_version" alert.

   Note that earlier versions of TLS did not
 clearly specify the record
   layer version number value in all cases
   (TLSPlaintext.legacy_record_version).
  Servers will receive various
   TLS 1.x versions in this field, but its 
value MUST always be ignored.


appendix-D.3
0-RTT Backward Compatibility

   0-RTT data is not compatible with older 
servers.  An older server
   will respond to the ClientHello with an
 older ServerHello, but it
   will not correctly skip the 0-RTT data
 and will fail to complete the
   handshake.  This can cause issues when a
 client attempts to use
   0-RTT, particularly against multi-server
 deployments.  For example, a
   deployment could deploy TLS 1.3 gradually
 with some servers
   implementing TLS 1.3 and some implementing
 TLS 1.2, or a TLS 1.3
   deployment could be downgraded to TLS 1.2.

   A client that attempts to send 0-RTT
 data MUST fail a connection if
   it receives a ServerHello with TLS 1.2
 or older.  It can then retry
   the connection with 0-RTT disabled.  To
 avoid a downgrade attack, the
   client SHOULD NOT disable TLS 1.3, only 0-RTT.

   To avoid this error condition, multi-server
 deployments SHOULD ensure
   a uniform and stable deployment of TLS 1.3
 without 0-RTT prior to
   enabling 0-RTT.


appendix-D.4
Middlebox Compatibility Mode

   Field measurements 
[<a href="https://datatracker.ietf.org/doc/html/rfc8446#ref-Ben17a" title="&quot;Presentation before the TLS WG at IETF 100&quot;">Ben17a</a>] [<a href="https://datatracker.ietf.org/doc/html/rfc8446#ref-Ben17b" title="&quot;Additional TLS 1.3 results from Chrome&quot;">Ben17b</a>] [<a href="https://datatracker.ietf.org/doc/html/rfc8446#ref-Res17a" title="&quot;Preliminary data on Firefox TLS 1.3 Middlebox experiment&quot;">Res17a</a>] [<a href="https://datatracker.ietf.org/doc/html/rfc8446#ref-Res17b" title="&quot;
More compatibility measurement results&quot;">
Res17b</a>] 
have found
   that a significant number of middleboxes
 misbehave when a TLS
   client/server pair negotiates TLS 1.3.
  Implementations can increase
   the chance of making connections through
 those middleboxes by making
   the TLS 1.3 handshake look more like a
 TLS 1.2 handshake:

   -  The client always provides a non-empty
 session ID in the
      ClientHello, as described in the
 legacy_session_id section of
      <a href="https://datatracker.ietf.org/doc/html/rfc8446#section-4.1.2">
Section 4.1.2</a>.

   -  If not offering early data, the client
 sends a dummy
      change_cipher_spec record (see the third
 paragraph of 
<a href="https://datatracker.ietf.org/doc/html/rfc8446#section-5">
Section 5</a>)
      immediately before its second flight.
  This may either be before
      its second ClientHello or before its
 encrypted handshake flight.
      If offering early data, the record is
 placed immediately after the
      first ClientHello.

   -  The server sends a dummy change_cipher_spec
 record immediately
      after its first handshake message.
  This may either be after a
      ServerHello or a HelloRetryRequest.

   When put together, these changes make the
 TLS 1.3 handshake resemble
   TLS 1.2 session resumption, which improves
 the chance of successfully
   connecting through middleboxes.  This 
"compatibility mode" is
   partially negotiated: the client can opt
 to provide a session ID or
   not, and the server has to echo it.
  Either side can send
   change_cipher_spec at any time during the
 handshake, as they must be
   ignored by the peer, but if the client
 sends a non-empty session ID,
   the server MUST send the change_cipher_spec
 as described in this
   appendix.


appendix-D.5
Security Restrictions Related to Backward
Compatibility

   Implementations negotiating the use of
 older versions of TLS SHOULD
   prefer forward secret and AEAD cipher
 suites, when available.

   The security of RC4 cipher suites is
 considered insufficient for the
   reasons cited in 
[<a href="https://datatracker.ietf.org/doc/html/rfc7465" title="&quot;Prohibiting RC4 Cipher Suites&quot;">
RFC7465</a>].
  Implementations MUST NOT offer or
   negotiate RC4 cipher suites for any
 version of TLS for any reason.

   Old versions of TLS permitted the use of
 very low strength ciphers.
   Ciphers with a strength less than 112
 bits MUST NOT be offered or
   negotiated for any version of TLS for
 any reason.

   The security of SSL 3.0
 [<a href="https://datatracker.ietf.org/doc/html/rfc6101" title="&quot;The Secure Sockets Layer (SSL) Protocol Version 3.0&quot;">
RFC6101</a>] 
is considered insufficient for the
   reasons enumerated in 
[<a href="https://datatracker.ietf.org/doc/html/rfc7568" title="&quot;Deprecating Secure Sockets Layer Version 3.0&quot;">
RFC7568</a>],
 and it MUST NOT be negotiated for
   any reason.

   The security of SSL 2.0 
[<a href="https://datatracker.ietf.org/doc/html/rfc8446#ref-SSL2" title="&quot;The SSL Protocol&quot;">
SSL2</a>] is considered insufficient for the
   reasons enumerated in 
[<a href="https://datatracker.ietf.org/doc/html/rfc6176" title="&quot;Prohibiting Secure Sockets Layer (SSL) Version 2.0&quot;">
RFC6176</a>], and it MUST NOT be negotiated for
   any reason.

   Implementations MUST NOT send an SSL version
 2.0 compatible
   CLIENT-HELLO.  Implementations MUST NOT
 negotiate TLS 1.3 or later
   using an SSL version 2.0 compatible 
CLIENT-HELLO.  Implementations
   are NOT RECOMMENDED to accept an SSL version
 2.0 compatible
   CLIENT-HELLO in order to negotiate older
 versions of TLS.

   Implementations MUST NOT send a
 ClientHello.legacy_version or
   ServerHello.legacy_version set to 0x0300
 or less.  Any endpoint
   receiving a Hello message with 
ClientHello.legacy_version or
   ServerHello.legacy_version set to 0x0300
 MUST abort the handshake
   with a "protocol_version" alert.

   Implementations MUST NOT send any records
 with a version less than
   0x0300.  Implementations SHOULD NOT accept
 any records with a version
   less than 0x0300 (but may inadvertently
 do so if the record version
   number is ignored completely).

   Implementations MUST NOT use the Truncated
 HMAC extension, defined in
   <a href="https://datatracker.ietf.org/doc/html/rfc6066#section-7">Section&nbsp;7 of [
RFC6066]</a>, as it is not applicable to
 AEAD algorithms
   and has been shown to be insecure in some
 scenarios.





