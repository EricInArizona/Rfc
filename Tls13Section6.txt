RFC 8446 - The Transport Layer Security
(TLS) Protocol Version 1.3

Section 6
Alert Protocol

   TLS provides an Alert content type to
 indicate closure information
   and errors.  Like other messages, alert
messages are encrypted as
   specified by the current connection state.

   Alert messages convey a description of the
 alert and a legacy field
   that conveyed the severity level of the
 message in previous versions
   of TLS.  Alerts are divided into two
 classes: closure alerts and
   error alerts.  In TLS 1.3, the severity
 is implicit in the type of
   alert being sent, and the "level" field
 can safely be ignored.  The
   "close_notify" alert is used to indicate
 orderly closure of one
   direction of the connection.  Upon
 receiving such an alert, the TLS
   implementation SHOULD indicate end-of-data
 to the application.

   Error alerts indicate abortive closure
 of the connection (see
   <a href="https://datatracker.ietf.org/doc/html/rfc8446#section-6.2">
Section 6.2</a>).  Upon receiving an error
 alert, the TLS implementation
   SHOULD indicate an error to the application
 and MUST NOT allow any
   further data to be sent or received on
 the connection.  Servers and
   clients MUST forget the secret values and
 keys established in failed
   connections, with the exception of the
 PSKs associated with session
   tickets, which SHOULD be discarded if possible.

   All the alerts listed in
<a href="https://datatracker.ietf.org/doc/html/rfc8446#section-6.2">
Section 6.2</a> MUST be sent with
   AlertLevel=fatal and MUST be treated as
 error alerts when received
   regardless of the AlertLevel in the message.
  Unknown Alert types
   MUST be treated as error alerts.

   Note: TLS defines two generic alerts
(see <a href="https://datatracker.ietf.org/doc/html/rfc8446#section-6">
Section 6</a>) to use upon
   failure to parse a message.  Peers which
 receive a message which
   cannot be parsed according to the syntax
 (e.g., have a length
   extending beyond the message boundary or
 contain an out-of-range
   length) MUST terminate the connection
 with a "decode_error" alert.
   Peers which receive a message which
 is syntactically correct but
   semantically invalid (e.g., a DHE share
 of p - 1, or an invalid enum)
   MUST terminate the connection with an
 "illegal_parameter" alert.



      enum { warning(1), fatal(2), (255) } AlertLevel;

      enum {
          close_notify(0),
          unexpected_message(10),
          bad_record_mac(20),
          record_overflow(22),
          handshake_failure(40),
          bad_certificate(42),
          unsupported_certificate(43),
          certificate_revoked(44),
          certificate_expired(45),
          certificate_unknown(46),
          illegal_parameter(47),
          unknown_ca(48),
          access_denied(49),
          decode_error(50),
          decrypt_error(51),
          protocol_version(70),
          insufficient_security(71),
          internal_error(80),
          inappropriate_fallback(86),
          user_canceled(90),
          missing_extension(109),
          unsupported_extension(110),
          unrecognized_name(112),
          bad_certificate_status_response(113),
          unknown_psk_identity(115),
          certificate_required(116),
          no_application_protocol(120),
          (255)
      } AlertDescription;

      struct {
          AlertLevel level;
          AlertDescription description;
      } Alert;



section-6.1
Closure Alerts

   The client and the server must share
 knowledge that the connection is
   ending in order to avoid a truncation attack.

   close_notify:  This alert notifies the
 recipient that the sender will
      not send any more messages on this
 connection.  Any data received
      after a closure alert has been received
 MUST be ignored.

   user_canceled:  This alert notifies the
 recipient that the sender is
      canceling the handshake for some reason
 unrelated to a protocol
      failure.  If a user cancels an operation
 after the handshake is
      complete, just closing the connection
 by sending a "close_notify"
      is more appropriate.  This alert SHOULD
 be followed by a
      "close_notify".  This alert generally
 has AlertLevel=warning.

   Either party MAY initiate a close of its
 write side of the connection
   by sending a "close_notify" alert.  Any
data received after a closure
   alert has been received MUST be ignored.
  If a transport-level close
   is received prior to a "close_notify", the
 receiver cannot know that
   all the data that was sent has been received.

   Each party MUST send a "close_notify" alert
 before closing its write
   side of the connection, unless it has
 already sent some error alert.
   This does not have any effect on its read
 side of the connection.
   Note that this is a change from versions
 of TLS prior to TLS 1.3 in
   which implementations were required to
react to a "close_notify" by
   discarding pending writes and sending an
 immediate "close_notify"
   alert of their own.  That previous
requirement could cause truncation
   in the read side.  Both parties need not
 wait to receive a
   "close_notify" alert before closing their
 read side of the
   connection, though doing so would introduce
 the possibility of
   truncation.

   If the application protocol using TLS
 provides that any data may be
   carried over the underlying transport after
 the TLS connection is
   closed, the TLS implementation MUST receive
 a "close_notify" alert
   before indicating end-of-data to the
 application layer.  No part of
   this standard should be taken to dictate
 the manner in which a usage
   profile for TLS manages its data transport,
 including when
   connections are opened or closed.

   Note: It is assumed that closing the
 write side of a connection
   reliably delivers pending data before
 destroying the transport.


section-6.2
Error Alerts

   Error handling in TLS is very simple.
  When an error is detected, the
   detecting party sends a message to its peer.
  Upon transmission or
   receipt of a fatal alert message, both
 parties MUST immediately close
   the connection.

   Whenever an implementation encounters a
 fatal error condition, it
   SHOULD send an appropriate fatal alert
 and MUST close the connection
   without sending or receiving any
 additional data.  In the rest of
   this specification, when the phrases
 "terminate the connection" and
   "abort the handshake" are used without
 a specific alert it means that
   the implementation SHOULD send the alert
 indicated by the
   descriptions below.  The phrases "terminate
 the connection with an X
   alert" and "abort the handshake with an
 X alert" mean that the
   implementation MUST send alert X if it
 sends any alert.  All alerts
   defined below in this section, as well
 as all unknown alerts, are
   universally considered fatal as of
TLS 1.3
(see <a href="https://datatracker.ietf.org/doc/html/rfc8446#section-6">
Section 6</a>).  The
   implementation SHOULD provide a way to
 facilitate logging the sending
   and receiving of alerts.

   The following error alerts are defined:

   unexpected_message:  An inappropriate message
 (e.g., the wrong
      handshake message, premature Application
 Data, etc.) was received.
      This alert should never be observed
 in communication between
      proper implementations.

   bad_record_mac:  This alert is returned if
 a record is received which
      cannot be deprotected.  Because AEAD
 algorithms combine decryption
      and verification, and also to avoid
 side-channel attacks, this
      alert is used for all deprotection
 failures.  This alert should
      never be observed in communication
 between proper implementations,
      except when messages were corrupted
 in the network.

   record_overflow:  A TLSCiphertext record
 was received that had a
      length more than 2^14 + 256 bytes, or
 a record decrypted to a
      TLSPlaintext record with more than 2^14
 bytes (or some other
      negotiated limit).  This alert should
 never be observed in
      communication between proper
implementations, except when messages
      were corrupted in the network.

   handshake_failure:  Receipt of a
"handshake_failure" alert message
      indicates that the sender was unable
 to negotiate an acceptable
      set of security parameters given the
 options available.

   bad_certificate:  A certificate was corrupt,
 contained signatures
      that did not verify correctly, etc.


   unsupported_certificate:  A certificate
 was of an unsupported type.

   certificate_revoked:  A certificate was
revoked by its signer.

   certificate_expired:  A certificate has
 expired or is not currently
      valid.

   certificate_unknown:  Some other
 (unspecified) issue arose in
      processing the certificate, rendering
 it unacceptable.

   illegal_parameter:  A field in the
 handshake was incorrect or
      inconsistent with other fields.  This
 alert is used for errors
      which conform to the formal protocol
 syntax but are otherwise
      incorrect.

   unknown_ca:  A valid certificate chain or
 partial chain was received,
      but the certificate was not accepted
 because the CA certificate
      could not be located or could not be
 matched with a known trust
      anchor.

   access_denied:  A valid certificate or PSK
 was received, but when
      access control was applied, the sender
 decided not to proceed with
      negotiation.

   decode_error:  A message could not be
 decoded because some field was
      out of the specified range or the
 length of the message was
      incorrect.  This alert is used for
 errors where the message does
      not conform to the formal protocol
 syntax.  This alert should
      never be observed in communication
 between proper implementations,
      except when messages were corrupted
 in the network.

   decrypt_error:  A handshake (not record
 layer) cryptographic
      operation failed, including being
 unable to correctly verify a
      signature or validate a Finished
 message or a PSK binder.

   protocol_version:  The protocol version
 the peer has attempted to
      negotiate is recognized but not
 supported (see
<a href="https://datatracker.ietf.org/doc/html/rfc8446#appendix-D">
Appendix D</a>).

   insufficient_security:  Returned instead
 of "handshake_failure" when
      a negotiation has failed specifically
 because the server requires
      parameters more secure than those
 supported by the client.

   internal_error:  An internal error
 unrelated to the peer or the
      correctness of the protocol (such as
 a memory allocation failure)
      makes it impossible to continue.

   inappropriate_fallback:  Sent by a server
 in response to an invalid
      connection retry attempt from a
 client (see
[<a href="https://datatracker.ietf.org/doc/html/rfc7507" title="&quot;
TLS Fallback Signaling Cipher Suite Value
 (SCSV) for Preventing Protocol Downgrade
 Attacks&quot;">RFC7507</a>]).


   missing_extension:  Sent by endpoints
 that receive a handshake
      message not containing an extension
 that is mandatory to send for
      the offered TLS version or other
 negotiated parameters.

   unsupported_extension:  Sent by endpoints
 receiving any handshake
      message containing an extension known
 to be prohibited for
      inclusion in the given handshake
 message, or including any
      extensions in a ServerHello or
Certificate not first offered in
      the corresponding ClientHello or
 CertificateRequest.

   unrecognized_name:  Sent by servers
 when no server exists identified
      by the name provided by the client
 via the "server_name" extension
      (see
[<a href="https://datatracker.ietf.org/doc/html/rfc6066" title="&quot;
Transport Layer Security (TLS) Extensions:
 Extension Definitions&quot;">RFC6066</a>]).

   bad_certificate_status_response:  Sent by
 clients when an invalid or
      unacceptable OCSP response is provided
 by the server via the
      "status_request" extension (see
[<a href="https://datatracker.ietf.org/doc/html/rfc6066" title="&quot;
Transport Layer Security (TLS) Extensions:
 Extension Definitions&quot;">RFC6066</a>]).

   unknown_psk_identity:  Sent by servers
 when PSK key establishment is
      desired but no acceptable PSK identity
 is provided by the client.
      Sending this alert is OPTIONAL;
 servers MAY instead choose to send
      a "decrypt_error" alert to merely
 indicate an invalid PSK
      identity.

   certificate_required:  Sent by servers
 when a client certificate is
      desired but none was provided by the client.

   no_application_protocol:  Sent by servers
 when a client
      "application_layer_protocol_negotiation"
 extension advertises only
      protocols that the server does not
 support (see
[<a href="https://datatracker.ietf.org/doc/html/rfc7301" title="&quot;Transport Layer Security (TLS) Application-Layer Protocol Negotiation Extension&quot;">
RFC7301</a>]).

   New Alert values are assigned by IANA
 as described in
<a href="https://datatracker.ietf.org/doc/html/rfc8446#section-11">
Section 11</a>.
